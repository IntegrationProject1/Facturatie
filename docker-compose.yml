services:
  # MySQL Database Service
  db:
    image: mysql:8.0
    container_name: facturatie_db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
      - /data/facturatie/mysql:/var/lib/mysql:rw
    networks:
      - facturatie_network

  # FossBilling Application Service
  app:
    image: fossbilling/fossbilling:latest
    container_name: facturatie_app
    depends_on:
      - db
    ports:
      - "30081:80"
    environment:
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - app_data:/var/www/html
      - /data/facturatie/app:/var/www/html:rw
    networks:
      - facturatie_network

  # phpMyAdmin Service 
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: facturatie_phpmyadmin
    depends_on:
      - db
    ports:
      - "30082:80"
    environment:
      PMA_HOST: db
    networks:
      - facturatie_network

  #User Creation providor Service
  user-creation-providor:
    build: ./user-creation-providor
    container_name: facturatie_user_providor
    restart: unless-stopped
    env_file: .env
    depends_on:
      - db
    networks:
      - facturatie_network

#User Update providor Service
  user-update-providor:
    build: ./user-update-providor
    container_name: facturatie_update_providor
    restart: unless-stopped
    env_file: .env
    depends_on:
      - db
    networks:
      - facturatie_network

#User Deletion providor Service
  user-deletion-providor:
    build: ./user-deletion-providor
    container_name: facturatie_deletion_providor
    restart: unless-stopped
    env_file: .env
    depends_on:
      - db
    networks:
      - facturatie_network

# User Deletion Consumer Service
  user-deletion-consumer:
    build: ./user-deletion-consumer
    container_name: facturatie_deletion_consumer
    restart: unless-stopped
    env_file: .env
    depends_on:
      - db
    networks:
      - facturatie_network

# User Creation Consumer Service
  user-creation-consumer:
    build: ./user-creation-consumer
    container_name: facturatie_creation_consumer
    restart: unless-stopped
    env_file: .env
    depends_on:
      - db
    networks:
      - facturatie_network

# User Update Consumer Service
  user-update-consumer:
    build: ./user-update-consumer
    container_name: facturatie_update_consumer
    restart: unless-stopped
    env_file: .env
    depends_on:
      - db
    networks:
      - facturatie_network

# RabbitMQ log-monitor Service
  log-monitor:
    build: ./log_monitor
    container_name: facturatie_log_monitor
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    env_file: .env
    networks:
      - facturatie_network

# Heartbeat Service to CRM
  heartbeat:
    build: ./heartbeat
    container_name: facturatie_heartbeat
    restart: always
    depends_on:
      - db
    environment:
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    networks:
      - facturatie_network

# Invoice mailing providor Service
  invoice-mailing-providor:
    build: ./invoice-mailing-providor
    container_name: facturatie_invoice_providor
    restart: unless-stopped
    env_file: .env
    depends_on:
      - db
    networks:
      - facturatie_network

# Invoice kassa consumer Service
  invoice-kassa-consumer:
    build: ./invoice-kassa-consumer
    container_name: facturatie_kassa_consumer
    restart: unless-stopped
    env_file: .env
    depends_on:
      - db
    networks:
      - facturatie_network


networks:
  facturatie_network:
    name: facturatie_network
    driver: bridge

volumes:
  db_data:
  app_data: